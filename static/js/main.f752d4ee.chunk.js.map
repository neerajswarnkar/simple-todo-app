{"version":3,"sources":["component/TodoItem.js","component/TodoList.js","component/Header.js","component/InputContainer.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","type","checked","todo","status","onChange","handleChangeProps","id","onClick","removeItemProps","title","TodoList","this","todos","map","key","Component","Header","inputContainer","state","addTodo","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","console","log","onSubmit","placeholder","App","handleChange","removeItem","filter","addTodoItem","newTodoTask","Date","now","InputContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uOAkBeA,MAhBf,SAAkBC,GAChB,OACE,kBAAC,WAAD,KACE,2BACEC,KAAK,WACLC,QAASF,EAAMG,KAAKC,OACpBC,SAAU,kBAAML,EAAMM,kBAAkBN,EAAMG,KAAKI,OAErD,4BAAQC,QAAS,kBAAMR,EAAMS,gBAAgBT,EAAMG,KAAKI,MAAxD,UAGA,4BAAKP,EAAMG,KAAKO,SCOPC,E,uKAhBH,IAAD,OACP,OACE,4BACGC,KAAKZ,MAAMa,MAAMC,KAAI,SAAAX,GAAI,OACxB,kBAAC,EAAD,CACEY,IAAKZ,EAAKI,GACVJ,KAAMA,EACNG,kBAAmB,EAAKN,MAAMM,kBAC9BG,gBAAiB,EAAKT,MAAMS,0B,GATjBO,aCURC,EAXA,WACb,OACE,gCACE,iDACA,yG,OC8BSC,E,4MAjCbC,MAAQ,CACNT,MAAO,I,EAGTU,QAAU,SAAAC,GACR,EAAKC,SAAL,eACGD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAG9BC,aAAe,SAAAL,GACbA,EAAEM,iBACF,EAAK3B,MAAM4B,aAAa,EAAKT,MAAMT,OACnC,EAAKY,SAAS,CACZZ,MAAO,KAETmB,QAAQC,IAAI,U,uDAGZ,OACE,0BAAMC,SAAUnB,KAAKc,cACnB,2BACEzB,KAAK,OACL+B,YAAY,wBACZP,MAAOb,KAAKO,MAAMT,MAClBc,KAAK,QACLnB,SAAUO,KAAKQ,UAEjB,4BAAQnB,KAAK,UAAb,Y,GA5BqBe,aCsEdiB,G,wDA7Db,aAAe,IAAD,8BACZ,gBAYFC,aAAe,SAAA3B,GACb,EAAKe,SAAS,CACZT,MAAO,EAAKM,MAAMN,MAAMC,KAAI,SAAAX,GAI1B,OAHIA,EAAKI,KAAOA,IACdJ,EAAKC,QAAUD,EAAKC,QAEfD,QAnBC,EAwBdgC,WAAa,SAAA5B,GACX,EAAKe,SAAS,CACZT,MAAM,YACD,EAAKM,MAAMN,MAAMuB,QAAO,SAAAjC,GACzB,OAAOA,EAAKI,KAAOA,SA5Bb,EAkCd8B,YAAc,SAAA3B,GACZ,IAAM4B,EAAc,CAClB/B,GAAIgC,KAAKC,MACT9B,MAAOA,EACPN,OAAQ,IAEV,EAAKkB,SAAS,CACZT,MAAM,GAAD,mBAAM,EAAKM,MAAMN,OAAjB,CAAwByB,MAE/BT,QAAQC,IAAIpB,IAzCZ,EAAKS,MAAQ,CACXN,MAAO,CACL,CACEN,GAAIgC,KAAKC,MACT9B,MAAO,cACPN,OAAQ,MAPF,E,qDA+CZ,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAACqC,EAAD,CAAgBb,aAAchB,KAAKyB,cACnC,kBAAC,EAAD,CACExB,MAAOD,KAAKO,MAAMN,MAClBP,kBAAmBM,KAAKsB,aACxBzB,gBAAiBG,KAAKuB,kB,GAvDdnB,cCEE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.f752d4ee.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={props.todo.status}\r\n        onChange={() => props.handleChangeProps(props.todo.id)}\r\n      />\r\n      <button onClick={() => props.removeItemProps(props.todo.id)}>\r\n        Remove\r\n      </button>\r\n      <li>{props.todo.title}</li>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.todos.map(todo => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            handleChangeProps={this.props.handleChangeProps}\r\n            removeItemProps={this.props.removeItemProps}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <h1>Todo App in React</h1>\r\n      <p>\r\n        Add your task from below field and hit enter or just click on Add button\r\n      </p>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass inputContainer extends Component {\r\n  state = {\r\n    title: \"\"\r\n  };\r\n\r\n  addTodo = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodoProps(this.state.title);\r\n    this.setState({\r\n      title: \"\"\r\n    });\r\n    console.log(\"Hello\");\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"add your todo task...\"\r\n          value={this.state.title}\r\n          name=\"title\"\r\n          onChange={this.addTodo}\r\n        />\r\n        <button type=\"submit\">Add</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default inputContainer;\r\n","import React, { Component, Fragment } from \"react\";\nimport TodoList from \"./component/TodoList\";\nimport Header from \"./component/Header\";\nimport InputContainer from \"./component/InputContainer\";\n// import List from \"./component/List\";\n// import CounterButton from \"./component/counterButton\";\n// import TodoContainer from \"./component/TodoContainer\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [\n        {\n          id: Date.now(),\n          title: \"learn React\",\n          status: \"\"\n        }\n      ]\n    };\n  }\n\n  handleChange = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.status = !todo.status;\n        }\n        return todo;\n      })\n    });\n  };\n\n  removeItem = id => {\n    this.setState({\n      todos: [\n        ...this.state.todos.filter(todo => {\n          return todo.id !== id;\n        })\n      ]\n    });\n  };\n\n  addTodoItem = title => {\n    const newTodoTask = {\n      id: Date.now(),\n      title: title,\n      status: \"\"\n    };\n    this.setState({\n      todos: [...this.state.todos, newTodoTask]\n    });\n    console.log(title);\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <InputContainer addTodoProps={this.addTodoItem} />\n        <TodoList\n          todos={this.state.todos}\n          handleChangeProps={this.handleChange}\n          removeItemProps={this.removeItem}\n        ></TodoList>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n\n/*incrementCount = () => {\n    this.setState({\n      count: this.state.count + 1\n    });\n  };\n  decrementCount = () => {\n    this.setState({\n      count: this.state.count - 1\n    });\n  };\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n\n  <h3>Count : {count}</h3>\n        <CounterButton\n          title={\"+\"}\n          task={() => this.incrementCount()}\n        ></CounterButton>\n        <CounterButton\n          title={\"-\"}\n          task={() => this.decrementCount()}\n        ></CounterButton>\n        <CounterButton\n          title={\"Reset\"}\n          task={() => this.reset()}\n        ></CounterButton>\n\n  */\n// Second project Todo\n\n/*\n\nonChange = event => {\n    this.setState({\n      term: event.target.value\n    });\n  };\n\n  Submit = event => {\n    event.preventDefault();\n    this.setState({\n      term: \"\",\n      items: [...this.state.items, this.state.term]\n    });\n  };\n\n  <form onSubmit={this.Submit}>\n          <input value={this.state.term} onChange={this.onChange} />\n          <button>Add</button>\n        </form>\n        <hr />\n        <List items={this.state.items}></List>\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}